{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/add-tournament/add-tournament.component.html","webpack:///src/app/add-tournament/add-tournament.component.ts","webpack:///src/app/add-tournament/player-checkbox/player-checkbox.component.ts","webpack:///src/app/add-tournament/player-checkbox/player-checkbox.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/edit-tournament/edit-tournament.component.html","webpack:///src/app/edit-tournament/edit-tournament.component.ts","webpack:///src/app/guards/auth.guard.ts","webpack:///src/app/infrastructure/models/FilterLogicalOperators.ts","webpack:///src/app/infrastructure/models/PaginatedRequest.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/register-dialog/register-dialog.component.ts","webpack:///src/app/login/register-dialog/register-dialog.component.html","webpack:///src/app/main-nav/main-nav.component.ts","webpack:///src/app/main-nav/main-nav.component.html","webpack:///src/app/my-achievements/my-achievements.component.ts","webpack:///src/app/my-achievements/my-achievements.component.html","webpack:///src/app/players-table/delete-player-dialog/delete-player-dialog.component.ts","webpack:///src/app/players-table/delete-player-dialog/delete-player-dialog.component.html","webpack:///src/app/players-table/players-table.component.ts","webpack:///src/app/players-table/players-table.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/services/account.service.ts","webpack:///src/app/services/player.service.ts","webpack:///src/app/services/shared/data.service.ts","webpack:///src/app/services/tournamnet-table.service.ts","webpack:///src/app/settings/settings.component.ts","webpack:///src/app/settings/settings.component.html","webpack:///src/app/tournament-table/add-tournament-dialog/add-tournament-dialog.component.ts","webpack:///src/app/tournament-table/add-tournament-dialog/add-tournament-dialog.component.html","webpack:///src/app/tournament-table/delete-dialog/delete-dialog.component.ts","webpack:///src/app/tournament-table/delete-dialog/delete-dialog.component.html","webpack:///src/app/tournament-table/tournament-table.component.html","webpack:///src/app/tournament-table/tournament-table.component.ts","webpack:///src/app/view-tournament/view-tournament.component.html","webpack:///src/app/view-tournament/view-tournament.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AddTournamentComponent","dataService","postTournamentService","router","deselectMatchUp$","players","scoreTable","generateInitialTable","getData","tournamentName","getName","console","log","tournament","createTournamentDto","postTournament","subscribe","x","navigate","Games","i","length","j","player1","player2","Game","playerGames","playerId","playerIdByRow","isWinner","checked","push","name","games","cell","column","row","arrayOfBooleans","map","y","table","obj","saveTournament","routeToTournamentTablePage","selector","templateUrl","styleUrls","PlayerCheckboxComponent","matchUpSelected$","cellChange","onDestroy$","pipe","emit","next","complete","routes","path","component","canActivate","children","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","config","PROVIDER_ID","provider","provideConfig","AppModule","provide","useFactory","tokenGetter","localStorage","getItem","whitelistedDomains","whitelistedDomainsForSendingToken","blacklistedRoutes","initialize","declarations","providers","bootstrap","EditTournamentComponent","editTournamentService","playerService","newGameList","getId","getTournamentById","onTour","tour","prepareGameList","firstRow","firstPlayerId","getPlayerById","toPromise","firstPlayer","userName","all","secondPlayerId","filter","el","player","populateTable","list","slice","result","reverse","counter","removed","splice","listForRow","rowPlayerId","game","playerGame1","find","playerGame2","gameId","obj2","tournamentId","GamesWithId","index","playerGame","idx","updateTournament","AuthGuard","accountService","route","state","isLoggedIn","queryParams","returnUrl","url","FilterLogicalOperators","PaginatedRequest","paginator","sort","filters","pageIndex","pageSize","columnNameForSorting","active","sortDirection","direction","requestFilters","LoginComponent","authService","formBuilder","dialog","snackBar","hide","userData","userLoginForm","group","required","password","snapshot","userLogin","value","login","bearerToken","setItem","accessToken","error","errorText","open","duration","verticalPosition","platform","signIn","response","googleLogin","width","height","openRegisterDialog","logInWithGoogle","RegisterDialogComponent","dialogRef","imgUrl","fileToUpload","surname","email","minLength","rolesList","getRoles","roles","file","item","reader","FileReader","onload","event","target","readAsDataURL","close","role","selectedRole","profileImage","createPlayerDto","postPlayer","p","finalMessage","errors","description","uploadImage","hasError","handleFileInput","savePlayer","dismiss","MainNavComponent","breakpointObserver","isHandset$","observe","Handset","matches","getPlayer","surName","removeItem","logout","MyAchievementsComponent","torunamentService","displayedColumns","getTournamentList","getWinnedTournaments","t","tournamentItemTable","dataSource","allowedRoles","payLoad","JSON","parse","window","atob","split","userRole","DeletePlayerDialogComponent","deletePlayer","PlayersTableComponent","tableColumns","displayName","useInSearch","searchInput","filterForm","loadPlayersFromApi","sortChange","page","paginatedRequest","getPlayersPaged","pagedPlayers","createFiltersFromSearchInput","logicalOperator","And","createFiltersFromForm","Object","controls","forEach","key","controlValue","foundTableColumn","tableColumn","filterValue","trim","Or","resetGrid","setData","afterClosed","applySearch","ProfileComponent","initializeForm","form","patchValue","imgArray","imgName","File","maxLength","getRawValue","updatePlayer","location","reload","get","save","cancel","AccountService","http","baseUrl","apiUrl","token","playerForLoginDto","post","providedIn","TournamentPlayer","passwordDto","message","filetToUpload","formData","FormData","append","DataService","data","temp","clearData","undefined","TournamentTableService","put","SettingsComponent","hide1","curentPassword","newPassword","changePassword","AddTournamentDialogComponent","_players","dropdownList","selectedItems","getPlayerList","dropdownSettings","singleSelection","idField","textField","selectAllText","unSelectAllText","itemsShowLimit","allowSearchFilter","items","setName","routeToAddTournamentPage","onItemSelect","onSelectAll","create","DeleteDialogComponent","tournamentService","deleteTournament","TournamentTableComponent","getProgress","res","setId","openAddTournamentDialog","ViewTournamentComponent","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<p>{{tournamentName}}</p>\n\n<div class=\"table\">\n  <div class=\"row\">\n    <div class=\"cell\"></div>\n    <div *ngFor=\"let player of players\" class=\"cell player\" >\n      {{player.userName}}\n    </div>\n  </div>\n  <div *ngFor=\"let row of scoreTable; index as i;\" class=\"row\">\n    <div class=\"cell player\">\n      {{players[i].userName}}\n    </div>\n\n    <div *ngFor=\"let cell of row; index as j\" class=\"cell\">\n      <mat-checkbox type=\"checkbox\" *ngIf=\"cell.checked !== 'x'\" [(ngModel)]=\"cell.checked\"(ngModelChange)=\"playerUpdated(cell)\"></mat-checkbox>\n    </div>\n  </div>\n</div>\n\n<button mat-raised-button color=\"primary\" class = \"save\" (click)=\"saveTournament()\">Save</button>\n<button mat-raised-button color=\"warn\" class = \"cancel\" (click)=\"routeToTournamentTablePage()\">Cancel</button>","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../services/shared/data.service';\r\nimport { IPlayer } from '../models/player.model';\r\nimport { Subject } from 'rxjs';\r\nimport { TournamentTableService } from '../services/tournamnet-table.service';\r\nimport { Router } from '@angular/router';\r\nimport { GameDto } from '../models/tournament-table.model';\r\n\r\n\r\ntype TableCell = {\r\n  row: number;\r\n  column: number;\r\n  checked: boolean | string;\r\n  playerIdByRow: number;\r\n};\r\n\r\n@Component({\r\n  selector: 'add-tournament',\r\n  templateUrl: './add-tournament.component.html',\r\n  styleUrls: ['./add-tournament.component.css']\r\n})\r\n\r\nexport class AddTournamentComponent implements OnInit {\r\n\r\n  deselectMatchUp$: Subject<boolean> = new Subject();\r\n\r\n  constructor(private dataService: DataService, private postTournamentService: TournamentTableService, private router: Router) {\r\n    this.scoreTable = this.generateInitialTable();\r\n\r\n  }\r\n\r\n  players: IPlayer[] = [];\r\n  scoreTable: TableCell[][];\r\n  tournamentName: string;\r\n\r\n\r\n  ngOnInit() {\r\n    this.players = this.dataService.getData() ;\r\n    this.tournamentName = this.dataService.getName();\r\n    console.log(this.players);\r\n    this.scoreTable = this.generateInitialTable();\r\n  }\r\n\r\n  async saveTournament() {\r\n    const tournament = this.createTournamentDto();\r\n    console.log(\"fromUI\", tournament);\r\n    this.postTournamentService.postTournament(tournament).subscribe(x => {\r\n      console.log(\"fromDb\", x);\r\n      this.router.navigate(['tournament-table']);\r\n    });\r\n  }\r\n\r\n  createTournamentDto() {\r\n    const Games: GameDto[] = [];\r\n\r\n    for (let i = 0; i < this.scoreTable.length; i++) {\r\n      for (let j = i + 1; j < this.scoreTable.length; j++) {\r\n        const player1 = this.scoreTable[i][j];\r\n        const player2 = this.scoreTable[j][i];\r\n        const Game: GameDto = {\r\n          playerGames: [\r\n            {\r\n              playerId: player1.playerIdByRow,\r\n              isWinner: !!player1.checked\r\n            },\r\n            {\r\n              playerId: player2.playerIdByRow,\r\n              isWinner: !!player2.checked\r\n            }\r\n          ]\r\n        }\r\n        Games.push(Game);\r\n      }\r\n    }\r\n    const tournament = {\r\n      name: this.tournamentName,\r\n      games: Games\r\n    }\r\n    return tournament;\r\n  }\r\n\r\n  playerUpdated(cell: TableCell) {\r\n    if (cell.checked) {\r\n      this.scoreTable[cell.column][cell.row].checked = false;\r\n    }\r\n    const arrayOfBooleans = this.scoreTable.map(x => x.map(y => y.checked));\r\n    console.log('arrayOfBooleans', arrayOfBooleans);\r\n    console.log('this.scoreTable', this.scoreTable);\r\n  }\r\n\r\n  generateInitialTable(): TableCell[][] {\r\n    const table: TableCell[][] = [];\r\n\r\n    for (let i = 0; i < this.players.length; ++i) {\r\n      table.push([]);\r\n      for (let j = 0; j < this.players.length; ++j) {\r\n        const obj: TableCell = {\r\n          row: i,\r\n          column: j,\r\n          checked: i === j ? \"x\" : false,\r\n          playerIdByRow: this.players[i].id\r\n        }\r\n        table[i].push(obj);\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  routeToTournamentTablePage() {\r\n    this.router.navigate(['tournament-table']);\r\n  }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-player-checkbox',\r\n  templateUrl: './player-checkbox.component.html',\r\n  styleUrls: ['./player-checkbox.component.css']\r\n})\r\nexport class PlayerCheckboxComponent implements OnInit, OnDestroy {\r\n  @Input() row: number;\r\n  @Input() column: number;\r\n  @Input() cell: any;\r\n  @Input() deselectMatchUp$: Subject<boolean>;\r\n  @Input() scoreTable: any;\r\n  @Output() matchUpSelected$: EventEmitter<any> = new EventEmitter();\r\n  @Output() cellChange = new EventEmitter();\r\n\r\n  private onDestroy$: Subject<null> = new Subject();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.deselectMatchUp$.pipe(\r\n      takeUntil(this.onDestroy$),\r\n      tap((x: any) => {\r\n        if (this.row === x.column && this.column === x.row) {\r\n          this.cell = false;\r\n          this.cellChange.emit(false);\r\n        }\r\n      })\r\n    ).subscribe()\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.onDestroy$.next();\r\n    this.onDestroy$.complete();\r\n  }\r\n\r\n  matchUpSelected(row: number, column: number, checked: boolean) {\r\n    this.cellChange.emit(checked);\r\n    this.matchUpSelected$.emit({ row, column, checked});\r\n  }\r\n\r\n}","<mat-checkbox *ngIf=\"cell !== 'x'\" [(ngModel)]=\"cell\" (change)=\"matchUpSelected(row, column, cell)\"></mat-checkbox>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TournamentTableComponent } from './tournament-table/tournament-table.component';\nimport { MyAchievementsComponent } from './my-achievements/my-achievements.component';\nimport { AddTournamentComponent } from './add-tournament/add-tournament.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { EditTournamentComponent } from './edit-tournament/edit-tournament.component';\nimport { LoginComponent } from './login/login.component';\nimport { MainNavComponent } from './main-nav/main-nav.component';\nimport { AuthGuard } from './guards/auth.guard';\nimport { PlayersTableComponent } from './players-table/players-table.component';\nimport { ViewTournamentComponent } from './view-tournament/view-tournament.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  {\n    path: '',\n    component: MainNavComponent,\n    canActivate: [AuthGuard],\n    children: [\n      { path: 'tournament-table', component: TournamentTableComponent },\n      { path: \"my-achievements\", component: MyAchievementsComponent },\n      { path: \"add-tournament\", component: AddTournamentComponent },\n      { path: \"edit-tournament\", component:EditTournamentComponent},\n      { path: \"view-tournament\", component:ViewTournamentComponent},\n      { path: \"settings\", component: SettingsComponent },\n      { path: \"players-table\", component: PlayersTableComponent },\n      { path: \"profile\", component: ProfileComponent }\n    ]\n  },\n  { path: '**', redirectTo: 'login', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ExerciseUI';\n}\n","\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MainNavComponent } from './main-nav/main-nav.component';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule} from '@angular/material/input';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { TournamentTableComponent } from './tournament-table/tournament-table.component';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MyAchievementsComponent } from './my-achievements/my-achievements.component';\r\nimport { AddTournamentComponent } from './add-tournament/add-tournament.component';\r\nimport { SettingsComponent } from './settings/settings.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatDialogModule} from '@angular/material/dialog';\r\nimport { MatSelectModule} from '@angular/material/select';\r\nimport { MatCheckboxModule} from '@angular/material/checkbox';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatGridListModule} from '@angular/material/grid-list';\r\nimport { AddTournamentDialogComponent } from './tournament-table/add-tournament-dialog/add-tournament-dialog.component';\r\nimport { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';\r\nimport { PlayerCheckboxComponent } from './add-tournament/player-checkbox/player-checkbox.component';\r\nimport { EditTournamentComponent } from './edit-tournament/edit-tournament.component';\r\nimport { DeleteDialogComponent } from './tournament-table/delete-dialog/delete-dialog.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterDialogComponent } from './login/register-dialog/register-dialog.component';\r\nimport { AuthGuard } from './guards/auth.guard';\r\nimport { environment } from 'src/environments/environment';\r\nimport { JwtModule } from '@auth0/angular-jwt';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { PlayersTableComponent } from './players-table/players-table.component';\r\nimport { DeletePlayerDialogComponent } from './players-table/delete-player-dialog/delete-player-dialog.component';\r\nimport { MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport { ViewTournamentComponent } from './view-tournament/view-tournament.component';\r\nimport { SocialLoginModule, AuthServiceConfig } from 'angularx-social-login';\r\nimport { GoogleLoginProvider } from 'angularx-social-login';\r\n\r\nlet config = new AuthServiceConfig([\r\n  {\r\n     id: GoogleLoginProvider.PROVIDER_ID,\r\n     provider: new GoogleLoginProvider(\"435504687783-jmg1heitefdgadc0r9svk92itrgi4581.apps.googleusercontent.com\")\r\n  }\r\n]);\r\nexport function provideConfig()\r\n {\r\n    return config;\r\n }\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MainNavComponent,\r\n    TournamentTableComponent,\r\n    MyAchievementsComponent,\r\n    AddTournamentComponent,\r\n    SettingsComponent,\r\n    ProfileComponent,\r\n    AddTournamentDialogComponent,\r\n    PlayerCheckboxComponent,\r\n    EditTournamentComponent,\r\n    DeleteDialogComponent,\r\n    LoginComponent,\r\n    RegisterDialogComponent,\r\n    PlayersTableComponent,\r\n    DeletePlayerDialogComponent,\r\n    ViewTournamentComponent  \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatGridListModule,\r\n    HttpClientModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatCheckboxModule,\r\n    FormsModule,\r\n    MatProgressBarModule,\r\n    ReactiveFormsModule,\r\n    MatSnackBarModule,\r\n    NgMultiSelectDropDownModule.forRoot(),\r\n    JwtModule.forRoot({\r\n      config: {\r\n        tokenGetter: () => localStorage.getItem('accessToken'),\r\n        whitelistedDomains: [environment.whitelistedDomainsForSendingToken],\r\n        blacklistedRoutes: [environment.blacklistedRoutes]\r\n   }}),\r\n   SocialLoginModule.initialize(config)\r\n  ],\r\n  providers: [\r\n    AuthGuard,\r\n    {\r\n      provide: AuthServiceConfig,\r\n      useFactory: provideConfig\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","<p *ngIf=\"tournament\">{{tournament.name}}</p>\n\n<div class=\"table\">\n  <div class=\"row\">\n    <div class=\"cell\"></div>\n    <div *ngFor=\"let player of players\" class=\"cell player\">\n      {{player.userName}}\n    </div>\n  </div>\n  <div *ngFor=\"let row of scoreTable; index as i;\" class=\"row\">\n    <div class=\"cell player\">\n      {{players[i].userName}}\n    </div>\n\n    <div  *ngFor=\"let cell of row; index as j\" class=\"cell\">\n      <mat-checkbox  type=\"checkbox\" *ngIf=\"cell.checked !== 'x'\" [(ngModel)]=\"cell.checked\"\n        (ngModelChange)=\"playerUpdated(cell)\"></mat-checkbox>\n    </div>\n  </div>\n</div>\n\n<button mat-raised-button class=\"save\"color=\"primary\" (click)=\"saveTournament()\">Save</button>\n<button mat-raised-button class=\"cancel\"color=\"warn\" (click)=\"routeToTournamentTablePage()\">Cancel</button>\n","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../services/shared/data.service';\r\nimport { TournamentTableService } from '../services/tournamnet-table.service';\r\nimport { TournamentDto, GameDto } from '../models/tournament-table.model';\r\nimport { Router } from '@angular/router';\r\nimport { TournamentPlayer } from '../services/player.service';\r\n\r\ntype TableCell = {\r\n  row: number;\r\n  column: number;\r\n  checked: boolean | string;\r\n  playerIdByRow: number;\r\n};\r\n\r\n@Component({\r\n  selector: 'edit-tournament',\r\n  templateUrl: './edit-tournament.component.html',\r\n  styleUrls: ['./edit-tournament.component.css']\r\n})\r\nexport class EditTournamentComponent implements OnInit {\r\n\r\n  id: number;\r\n  players: any[] = [];\r\n  newGameList: any[] = [];\r\n  scoreTable: TableCell[][] = [];\r\n  tournament: TournamentDto;\r\n\r\n  constructor(private dataService: DataService, private editTournamentService: TournamentTableService, private router: Router, private playerService: TournamentPlayer) { }\r\n\r\n  ngOnInit(): void {\r\n    this.id = this.dataService.getId();\r\n    this.editTournamentService.getTournamentById(this.id).subscribe(x => this.onTour(x));\r\n  }\r\n\r\n  async onTour(tour) {\r\n\r\n    this.tournament = tour;\r\n    this.newGameList = this.prepareGameList(this.tournament.games);\r\n    const firstRow = this.newGameList[0];\r\n    const firstPlayerId = firstRow[0].playerGames[0].playerId;\r\n    const player1 = await this.playerService.getPlayerById(firstPlayerId).toPromise();\r\n    const firstPlayer = { id: firstPlayerId, userName: player1.userName }\r\n    this.players = await Promise.all([firstPlayer, ...this.newGameList[0].map(async (games) => {\r\n      const secondPlayerId = games.playerGames.filter(el => el.playerId !== firstPlayerId)[0].playerId;\r\n      const player = await this.playerService.getPlayerById(secondPlayerId).toPromise();\r\n      return { id: secondPlayerId, userName: player.userName };\r\n    })]);\r\n\r\n    this.scoreTable = this.generateInitialTable();\r\n    this.populateTable(this.scoreTable);\r\n  }\r\n\r\n\r\n  playerUpdated(cell: TableCell) {\r\n    if (cell.checked) {\r\n      this.scoreTable[cell.column][cell.row].checked = false;\r\n    }\r\n    const arrayOfBooleans = this.scoreTable.map(x => x.map(y => y.checked));\r\n    console.log('arrayOfBooleans', arrayOfBooleans);\r\n    console.log('this.scoreTable', this.scoreTable);\r\n  }\r\n\r\n  prepareGameList(games) {\r\n    const list = games.slice();\r\n    const result = [];\r\n    list.reverse();\r\n    let counter = 1;\r\n\r\n    while (list.length) {\r\n      const removed = list.splice(0, counter);\r\n      result.push(removed.reverse());\r\n      counter++;\r\n    }\r\n    return result.reverse();\r\n  }\r\n\r\n  generateInitialTable() {\r\n    const table = [];\r\n\r\n    for (let i = 0; i < this.players.length; ++i) {\r\n      table.push([]);\r\n      for (let j = 0; j < this.players.length; ++j) {\r\n        const obj = {\r\n          row: i,\r\n          column: j,\r\n          checked: i === j ? \"x\" : false,\r\n          playerIdByRow: 1\r\n        }\r\n        table[i].push(obj);\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  populateTable(table) {\r\n    for (let i = 0; i < this.players.length; i++) {\r\n      const listForRow = this.newGameList[i];\r\n      const rowPlayerId = this.players[i].id; \r\n      for (let j = i + 1; j < this.players.length; j++) {\r\n        const game = listForRow[j - i - 1];\r\n        const playerGame1 = game.playerGames.find(el => el.playerId === rowPlayerId);\r\n        const playerGame2 = game.playerGames.find(el => el.playerId !== rowPlayerId);\r\n        const obj = {\r\n          row: i,\r\n          column: j,\r\n          checked: i === j ? \"x\" : playerGame1.isWinner,\r\n          playerIdByRow: playerGame1.playerId,\r\n          id: playerGame1.gameId\r\n        }\r\n        table[i][j] = obj;\r\n\r\n        const obj2 = {\r\n          row: j,\r\n          column: i,\r\n          checked: i === j ? \"x\" : playerGame2.isWinner,\r\n          playerIdByRow: playerGame2.playerId,\r\n          id: playerGame2.gameId\r\n        }\r\n        table[j][i] = obj2;\r\n      }\r\n    }\r\n  }\r\n  \r\n  createTournamentDto() {\r\n    const Games: GameDto[] = [];\r\n\r\n    for (let i = 0; i < this.scoreTable.length; i++) {\r\n      for (let j = i + 1; j < this.scoreTable.length; j++) {\r\n        const player1 = this.scoreTable[i][j];\r\n        const player2 = this.scoreTable[j][i];\r\n        const Game: GameDto = {\r\n          playerGames: [\r\n            {\r\n              playerId: player1.playerIdByRow,\r\n              isWinner: !!player1.checked,\r\n            },\r\n            {\r\n              playerId: player2.playerIdByRow,\r\n              isWinner: !!player2.checked,\r\n            }\r\n          ],\r\n          tournamentId: this.tournament.id,\r\n        }\r\n        Games.push(Game);\r\n      }\r\n    }\r\n\r\n    const GamesWithId = Games.map((game, index) => {\r\n      game.id = this.tournament.games[index].id\r\n      game.playerGames = game.playerGames.map((playerGame, idx) => {\r\n        playerGame.gameId = game.id;\r\n        playerGame.id = this.tournament.games[index].playerGames[idx].id;\r\n        return playerGame\r\n      })\r\n      return game;\r\n    })\r\n\r\n    const tournament = {\r\n      name: this.tournament.name,\r\n      games: GamesWithId,\r\n      id: this.tournament.id\r\n    }\r\n    return tournament;\r\n  }\r\n\r\n  async saveTournament() {\r\n    const tournament = this.createTournamentDto();\r\n    console.log({ tournament })\r\n    this.editTournamentService.updateTournament(tournament).subscribe(x => {\r\n      console.log(x);\r\n      this.router.navigate(['tournament-table']);\r\n    });\r\n  }\r\n\r\n  routeToTournamentTablePage() {\r\n    this.router.navigate(['tournament-table']);\r\n  }\r\n\r\n}\r\n","import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { AccountService } from '../services/account.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(private accountService: AccountService, private router: Router) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        if (this.accountService.isLoggedIn()) {\r\n            return true;\r\n        }\r\n        this.router.navigate(['login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}","export enum FilterLogicalOperators {\r\n    And,\r\n    Or,\r\n}\r\n","import { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { RequestFilters } from './RequestFilters';\r\n\r\n\r\nexport class PaginatedRequest {\r\n    pageIndex: number;\r\n    pageSize: number;\r\n    columnNameForSorting: string;\r\n    sortDirection: string;\r\n    requestFilters: RequestFilters;\r\n\r\n    constructor(paginator: MatPaginator, sort: MatSort, filters: RequestFilters) {\r\n        this.pageIndex = paginator.pageIndex;\r\n        this.pageSize = paginator.pageSize;\r\n        this.columnNameForSorting = sort.active;\r\n        this.sortDirection = sort.direction;\r\n        this.requestFilters = filters;\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { BearerToken } from '../models/account/BearerToken';\r\nimport { PlayerForLogin } from '../models/account/PlayerForLogin';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AccountService } from '../services/account.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { RegisterDialogComponent } from './register-dialog/register-dialog.component';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { GoogleLoginProvider, AuthService } from 'angularx-social-login';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  hide = true;\r\n\r\n  private returnUrl: string;\r\n  userData: any[] = [];\r\n  public userLoginForm: FormGroup;\r\n  public errorText: string;\r\n\r\n\r\n  constructor(\r\n    private accountService: AccountService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private formBuilder: FormBuilder,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n  ngOnInit() {\r\n    this.userLoginForm = this.formBuilder.group({\r\n      userName: ['', [Validators.required]],\r\n      password: ['', [Validators.required]]\r\n    });\r\n\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/tournament-table';\r\n\r\n  }\r\n\r\n  login() {\r\n    const userLogin: PlayerForLogin = {\r\n      ...this.userLoginForm.value\r\n    };\r\n    this.accountService.login(userLogin)\r\n      .subscribe((bearerToken: BearerToken) => {\r\n        localStorage.setItem('accessToken', bearerToken.accessToken);\r\n        this.router.navigate([this.returnUrl]);\r\n      }, error => {\r\n        this.errorText = error;\r\n        console.log(error);\r\n        this.snackBar.open(\"Invalid Login or Password\", '', {\r\n          duration: 3000,\r\n          verticalPosition: 'top'\r\n        })\r\n\r\n      });\r\n  }\r\n\r\n  logInWithGoogle(platform: string): void {\r\n    platform = GoogleLoginProvider.PROVIDER_ID;\r\n    this.authService.signIn(platform).then(\r\n      (response) => {\r\n        this.userData.push({\r\n          response\r\n        });\r\n      })\r\n    this.accountService.googleLogin(this.userData[0]).subscribe();\r\n  }\r\n\r\n\r\n  openRegisterDialog() {\r\n    this.dialog.open(RegisterDialogComponent, {\r\n      width: '600px',\r\n      height: '650px',\r\n    });\r\n  }\r\n\r\n}\r\n\r\n","<div id=\"container\" class=\"container\">\r\n  <div class=\"grandParentContaniner\">\r\n    <div class=\"parentContainer\">\r\n      <form novalidate class=\"loginForm\" [formGroup]=\"userLoginForm\">\r\n        <div>\r\n          <img class=\"imageSize\" src=\"../../assets/images/tournament-1.png\">\r\n          <h2>Login into TournamentBoard App</h2>\r\n\r\n          <mat-form-field style=\"display: block\" appearance=\"fill\">\r\n            <input matInput type=\"text\" placeholder=\"User Name\" formControlName=\"userName\" />\r\n          </mat-form-field>\r\n\r\n          <mat-form-field style=\"display: block\" appearance=\"fill\">\r\n            <input matInput type=\"password\" [type]=\"hide ? 'password':'text'\" placeholder=\"Password\"\r\n              formControlName=\"password\" />\r\n            <i class=\"material-icons\" matSuffix (click)=\"hide =!hide\">{{hide ?'visibility_off':'visibility'}}</i>\r\n          </mat-form-field>\r\n          <button mat-raised-button color=\"warn\" class=\"register\" (click)=\"login()\">Login</button>\r\n          <button mat-raised-button color=\"primary\" class=\"login\" (click)=\"openRegisterDialog()\">Register</button>\r\n          <button mat-raised-button color=\"accent\" class=\"googleLogin\" (click)=\"logInWithGoogle('Google')\"><i class=\"fa fa-google\"></i> Login</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { LoginComponent } from '../login.component';\r\nimport { TournamentPlayer } from 'src/app/services/player.service';\r\nimport { PlayerDto } from 'src/app/models/player.model';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-register-dialog',\r\n  templateUrl: './register-dialog.component.html',\r\n  styleUrls: ['./register-dialog.component.css']\r\n})\r\nexport class RegisterDialogComponent implements OnInit {\r\n  hide = true;\r\n\r\n  imgUrl: string = \"/assets/images/unnamed.jpg\";\r\n  fileToUpload: File = null;\r\n\r\n  name = new FormControl('', [Validators.required]);\r\n  surname = new FormControl('', [Validators.required]);\r\n  userName = new FormControl('', [Validators.required]);\r\n  email = new FormControl('', [Validators.required, Validators.email]);\r\n  password = new FormControl('', [Validators.required, Validators.minLength(5)]);\r\n  selectedRole: string;\r\n  rolesList = [];\r\n\r\n  errorText: any;\r\n  constructor(private snackBar: MatSnackBar, private dialogRef: MatDialogRef<LoginComponent>, private playerService: TournamentPlayer) { }\r\n\r\n  ngOnInit(): void {\r\n    this.playerService.getRoles().subscribe(roles => this.rolesList = roles);\r\n  }\r\n\r\n  handleFileInput(file: FileList) {\r\n    this.fileToUpload = file.item(0);\r\n    var reader = new FileReader();\r\n    reader.onload = (event: any) => {\r\n      this.imgUrl = event.target.result;\r\n    }\r\n    reader.readAsDataURL(this.fileToUpload);\r\n  }\r\n\r\n  dismiss() {\r\n    this.dialogRef.close(null);\r\n  }\r\n\r\n  createPlayerDto() {\r\n    const player: PlayerDto = {\r\n      name: this.name.value,\r\n      surname: this.surname.value,\r\n      userName: this.userName.value,\r\n      email: this.email.value,\r\n      password: this.password.value,\r\n      role: this.selectedRole,\r\n      profileImage: this.fileToUpload.name\r\n    }\r\n    return player;\r\n  }\r\n\r\n  savePlayer() {\r\n    const player = this.createPlayerDto();\r\n    this.playerService.postPlayer(player).subscribe(\r\n      p => {\r\n        this.errorText = p;\r\n        let finalMessage = \"\";\r\n        if (this.errorText.errors.length != 0) {\r\n          finalMessage = this.errorText.errors[0].description;\r\n        } else {\r\n          finalMessage = \"Registration Succes\"\r\n          this.dialogRef.close(null);\r\n        }\r\n        this.snackBar.open(finalMessage, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'top'\r\n        })\r\n      },\r\n      error => {\r\n        this.errorText = error;\r\n        this.snackBar.open(\"Incorect Password Input\", '', {\r\n          duration: 3000,\r\n          verticalPosition: 'top'\r\n        })\r\n      });\r\n    this.playerService.uploadImage(this.fileToUpload).subscribe();\r\n  }\r\n  getErrorMessage() {\r\n    if (this.password.hasError('required')) {\r\n      return 'You must enter a value';\r\n    }\r\n    return this.password.hasError('minLength(5)') ? 'Not a valid password' : '';\r\n  }\r\n  getErrorMessageEmail() {\r\n    if (this.email.hasError('required')) {\r\n      return 'You must enter a value';\r\n    }\r\n    return this.email.hasError('email') ? 'Not a valid email' : '';\r\n  }\r\n\r\n}\r\n","<h1>Create Profile</h1>\r\n<div>\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Name</mat-label>\r\n        <input matInput placeholder=\"PlayerName\" [formControl]=\"name\" required>\r\n    </mat-form-field>\r\n</div>\r\n\r\n<div>\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Surname</mat-label>\r\n        <input matInput placeholder=\"PlayerSurname\" [formControl]=\"surname\" required>\r\n    </mat-form-field>\r\n</div>\r\n\r\n<div>\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Email</mat-label>\r\n        <input matInput placeholder=\"Email\" [formControl]=\"email\" required>\r\n        <mat-error *ngIf=\"email.invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n</div>\r\n\r\n<div>\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Username</mat-label>\r\n        <input matInput placeholder=\"Username\" [formControl]=\"userName\" required>\r\n    </mat-form-field>\r\n</div>\r\n<div class=\"imput-pass\">\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input matInput type=\"password\" [type]=\"hide ? 'password':'text'\" placeholder=\"Password\"\r\n            [formControl]=\"password\" required>\r\n        <i class=\"material-icons\" matSuffix (click)=\"hide =!hide\">{{hide ?'visibility_off':'visibility'}}</i>\r\n        <mat-error *ngIf=\"password.invalid\">{{getErrorMessage()}}</mat-error>\r\n        <mat-hint>Min 5 characters,one upper case and one symbol </mat-hint>\r\n    </mat-form-field>\r\n</div>\r\n\r\n<div>\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Select Role</mat-label>\r\n        <mat-select [(value)]=\"selectedRole\">\r\n            <mat-option></mat-option>\r\n            <mat-option *ngFor=\"let role of rolesList\" [value]=\"role.name\">\r\n                {{role.name}}\r\n            </mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n</div>\r\n\r\n<div class=\"imgPosition\">\r\n    <img [src]=\"imgUrl\" class=\"imgStyle\">\r\n    <input type=\"file\" #Image accept=\"image/*\" (change)=\"handleFileInput($event.target.files)\" required>\r\n</div>\r\n\r\n<mat-dialog-actions> \r\n    <button mat-raised-button color=\"primary\" class=\"save\" (click)=\"savePlayer()\"\r\n        [disabled]=\"!userName.valid ||!surname.valid ||!email.valid ||!password.valid||!name.valid\">\r\n        <mat-icon>save</mat-icon>Save\r\n    </button>\r\n    <button mat-raised-button color=\"warn\" class=\"cancel\" (click)=\"dismiss()\">\r\n        <mat-icon>cancel</mat-icon>Cancel\r\n    </button>\r\n</mat-dialog-actions>","import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { TournamentPlayer } from '../services/player.service';\r\n\r\n\r\n@Component({\r\n  selector: 'main-nav',\r\n  templateUrl: './main-nav.component.html',\r\n  styleUrls: ['./main-nav.component.css']\r\n})\r\nexport class MainNavComponent {\r\n  imgUrl: string;\r\n\r\n  name: string;\r\n  surName: string;\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver, private router: Router, private playerService: TournamentPlayer) { }\r\n\r\n  ngOnInit(): void {\r\n    this.playerService.getPlayer().subscribe(p => {\r\n      this.name = p.name;\r\n      this.surName = p.surname;\r\n      this.imgUrl =  p.profileImage;\r\n    })\r\n  }\r\n\r\n  onFileSelected(event) {\r\n    console.log(event);\r\n  }\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('accessToken');\r\n    this.router.navigate(['login']);\r\n  }\r\n\r\n}\r\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport=\"false\"\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\" [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar color=\"warn\">{{name}} {{surName}}</mat-toolbar>\n    <mat-nav-list>\n      <img [src]=\"imgUrl\" class=\"imgStyle\">\n      <a mat-list-item routerLink=\"/profile\"><i class=\"fa fa-user\"></i>Profile</a>\n      <a mat-list-item routerLink=\"/tournament-table\"><i class=\"fa fa-list\"></i>AllTournaments</a>\n      <a mat-list-item routerLink=\"/my-achievements\"><i class=\"fa fa-trophy\"></i>MyAchievments</a>\n      <a mat-list-item routerLink=\"/players-table\"><i class=\"fa fa-users\"></i>AllPlayers</a>\n      <a mat-list-item routerLink=\"/settings\"><i class=\"fa fa-cog\"></i>Settings</a>\n      <button class=\"button1\" mat-raised-button class =\"Logout\" (click)=\"logout()\">Logout</button>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content class=\"clouds\">\n    <mat-toolbar color=\"primary\" >\n      <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span><img src=\"../../assets/images/tournament-1.png\"></span>\n    </mat-toolbar>\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>","import { Component, OnInit } from '@angular/core';\nimport { WinnedTournaments } from '../models/tournament-table.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { TournamentTableService } from '../services/tournamnet-table.service';\n\n\n@Component({\n  selector: 'my-achievements',\n  templateUrl: './my-achievements.component.html',\n  styleUrls: ['./my-achievements.component.css']\n})\nexport class MyAchievementsComponent implements OnInit {\n\n  dataSource: MatTableDataSource<WinnedTournaments>;\n  tournamentItemTable: WinnedTournaments[];\n\n  constructor(private torunamentService: TournamentTableService) { }\n\n  ngOnInit(): void {\n    this.getTournamentList();\n  }\n  displayedColumns: string[] = ['id', 'tournamentName','winnedGames'];\n\n  getTournamentList() {\n    this.torunamentService.getWinnedTournaments()\n      .subscribe(t => {\n        this.tournamentItemTable = t;\n        this.dataSource = new MatTableDataSource(t);\n        console.log(t);\n        \n      })\n  }\n\n  roleMatch(allowedRoles): boolean {\n    var payLoad = JSON.parse(window.atob(localStorage.getItem('accessToken').split('.')[1]));\n    var userRole = payLoad['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];    \n    if (allowedRoles == userRole)\n      return true;\n    else\n      return false;\n  }\n\n}\n","<h1>My Tournaments</h1>\n<div class=\"mat-elevation-z8 tournament-table\">\n<table mat-table [dataSource]=\"dataSource\" class=\"full-width-table\">\n\n    <ng-container matColumnDef=\"id\" class = \"center\" >\n        <th mat-header-cell *matHeaderCellDef >TournamentId</th>\n        <td mat-cell *matCellDef=\"let tournament\"> {{tournament.tournamentId}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"tournamentName\">\n        <th mat-header-cell *matHeaderCellDef>TournamentName</th>\n        <td mat-cell *matCellDef=\"let tournament\"> {{tournament.tournamentName}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"winnedGames\">\n        <th mat-header-cell *matHeaderCellDef>Winned Games</th>\n        <td mat-cell *matCellDef=\"let tournament\"> {{tournament.wins}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from 'src/app/services/shared/data.service';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { TournamentPlayer } from 'src/app/services/player.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-delete-player-dialog',\r\n  templateUrl: './delete-player-dialog.component.html',\r\n  styleUrls: ['./delete-player-dialog.component.css']\r\n})\r\nexport class DeletePlayerDialogComponent implements OnInit {\r\n\r\n  id: number;\r\n  errorText: any;\r\n  constructor(private snackBar: MatSnackBar, private dataService: DataService, private dialogRef: MatDialogRef<DeletePlayerDialogComponent>, private playerService: TournamentPlayer) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  dismiss() {\r\n    this.dialogRef.close(null);\r\n  }\r\n\r\n  deletePlayer() {\r\n    this.id = this.dataService.getData();\r\n    this.playerService.deletePlayer(this.id).subscribe(\r\n      p => {\r\n        this.snackBar.open(\"Player Deleted Successefully\", '', {\r\n          duration: 3000,\r\n          verticalPosition: 'top'\r\n        })\r\n      },\r\n      error => {\r\n        this.errorText = error;\r\n        let finalMessage = this.errorText.error;\r\n        this.snackBar.open(finalMessage, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'top'\r\n        })\r\n      });\r\n    this.dialogRef.close(null);\r\n  }\r\n\r\n}\r\n","<h2 mat-dialog-title>Are you sure delete this Player</h2>\n<mat-dialog-actions >\n    <button mat-mini-fab color=\"warn\"(click)=\"deletePlayer()\"><i class=\"fa fa-trash\"></i></button>\n    <button mat-mini-fab color=\"primary\" (click)=\"dismiss()\"><i class=\"fa fa-times\"></i></button>\n</mat-dialog-actions>","import { Component, ViewChild, AfterViewInit } from '@angular/core';\nimport { TournamentPlayer } from '../services/player.service';\nimport { IPlayer } from '../models/player.model';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { PagedResult } from '../infrastructure/models/PagedResult';\nimport { TableColumn } from '../infrastructure/models/TableColumn';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { RequestFilters } from '../infrastructure/models/RequestFilters';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { merge } from 'rxjs';\nimport { PaginatedRequest } from '../infrastructure/models/PaginatedRequest';\nimport { Filter } from '../infrastructure/models/Filter';\nimport { FilterLogicalOperators } from '../infrastructure/models/FilterLogicalOperators';\nimport { DataService } from '../services/shared/data.service';\nimport { DeletePlayerDialogComponent } from './delete-player-dialog/delete-player-dialog.component';\n\n@Component({\n  selector: 'players-table',\n  templateUrl: './players-table.component.html',\n  styleUrls: ['./players-table.component.css']\n})\nexport class PlayersTableComponent implements AfterViewInit {\n\n  playerTable: IPlayer[];\n  pagedPlayers: PagedResult<IPlayer>;\n\n  tableColumns: TableColumn[] = [\n    { name: 'profileImage', index:'profileImage',displayName:'profileImage'},\n    { name: 'id', index: 'id', displayName: 'Id' },\n    { name: 'name', index: 'name', displayName: 'Price' },\n    { name: 'surname', index: 'surname', displayName: 'Surname' },\n    { name: 'userName', index: 'userName', displayName: 'Username', useInSearch: true },\n    { name: 'email', index: 'email', displayName: 'Email' },\n    { name: 'registrationDate', index: 'registrationDate', displayName: 'RegistrationDate' },\n    { name: 'action', index:'action',displayName:'Action'}\n  ];\n  displayedColumns: string[];\n\n  searchInput = new FormControl('');\n  filterForm: FormGroup;\n  requestFilters: RequestFilters;\n\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n\n  constructor(\n    private playerService: TournamentPlayer,\n    private formBuilder: FormBuilder,\n    private dialog: MatDialog,\n    public snackBar: MatSnackBar,\n    private dataService: DataService,\n  ) {\n    this.displayedColumns = this.tableColumns.map(column => column.name);\n    this.filterForm = this.formBuilder.group({\n      userName: ['']\n    });\n  }\n\n  ngAfterViewInit() {\n    this.loadPlayersFromApi();\n\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    merge(this.sort.sortChange, this.paginator.page).subscribe(() => {\n      this.loadPlayersFromApi();\n    });\n  }\n\n  loadPlayersFromApi() {\n    const paginatedRequest = new PaginatedRequest(this.paginator, this.sort, this.requestFilters);\n    this.playerService.getPlayersPaged(paginatedRequest)\n      .subscribe((pagedPlayers: PagedResult<IPlayer>) => {\n        this.pagedPlayers = pagedPlayers;\n        console.log(pagedPlayers);\n\n      });\n  }\n\n  applySearch() {\n    this.createFiltersFromSearchInput();\n    this.loadPlayersFromApi();\n  }\n\n  resetGrid() {\n    this.requestFilters = { filters: [], logicalOperator: FilterLogicalOperators.And };\n    this.loadPlayersFromApi();\n  }\n\n  filterBooksFromForm() {\n    this.createFiltersFromForm();\n    this.loadPlayersFromApi();\n  }\n  private createFiltersFromForm() {\n    if (this.filterForm.value) {\n      const filters: Filter[] = [];\n\n      Object.keys(this.filterForm.controls).forEach(key => {\n        const controlValue = this.filterForm.controls[key].value;\n        if (controlValue) {\n          const foundTableColumn = this.tableColumns.find(tableColumn => tableColumn.name === key);\n          const filter: Filter = { path: foundTableColumn.index, value: controlValue };\n          filters.push(filter);\n        }\n      });\n\n      this.requestFilters = {\n        logicalOperator: FilterLogicalOperators.And,\n        filters\n      };\n    }\n  }\n\n  private createFiltersFromSearchInput() {\n    const filterValue = this.searchInput.value.trim();\n    if (filterValue) {\n      const filters: Filter[] = [];\n      this.tableColumns.forEach(column => {\n        if (column.useInSearch) {\n          const filter: Filter = { path: column.index, value: filterValue };\n          filters.push(filter);\n        }\n      });\n      this.requestFilters = {\n        logicalOperator: FilterLogicalOperators.Or,\n        filters\n      };\n    } else {\n      this.resetGrid();\n    }\n  }\n\n  roleMatch(allowedRoles): boolean {\n    var payLoad = JSON.parse(window.atob(localStorage.getItem('accessToken').split('.')[1]));\n    var userRole = payLoad['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n    if (allowedRoles == userRole)\n      return true;\n    else\n      return false;\n  }\n\n  openDeletePlayerDialog(id: number): void {\n    this.dataService.setData(id);\n    let dialogRef = this.dialog.open(DeletePlayerDialogComponent);\n    dialogRef.afterClosed().subscribe(() => { this.loadPlayersFromApi() });\n  }\n\n\n}\n","<h1>Players</h1>\r\n<div class=\"mat-elevation-z8 tournament-table\">\r\n\r\n    <mat-form-field>\r\n        <mat-label>Search</mat-label>\r\n        <input matInput [formControl]=\"searchInput\" (keyup.enter)=\"applySearch()\">\r\n    </mat-form-field>\r\n\r\n    <table mat-table [dataSource]=\"pagedPlayers?.items\" class=\"full-width-table\" matSort matSortActive=\"\"\r\n        matSortDirection=\"asc\">\r\n\r\n        <ng-container matColumnDef=\"profileImage\">\r\n            <th mat-header-cell *matHeaderCellDef>Profile Image</th>\r\n            <td mat-cell *matCellDef=\"let player\"><img class=\"imgStyle\" [src]=\"player.profileImage\"></td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"id\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\r\n            <td mat-cell *matCellDef=\"let player\"> {{player.id}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef>Name</th>\r\n            <td mat-cell *matCellDef=\"let player\"> {{player.name}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"surname\">\r\n            <th mat-header-cell *matHeaderCellDef>Surname</th>\r\n            <td mat-cell *matCellDef=\"let player\"> {{player.surname}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"userName\">\r\n            <th mat-header-cell *matHeaderCellDef>Username</th>\r\n            <td mat-cell *matCellDef=\"let player\"> {{player.userName}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"email\">\r\n            <th mat-header-cell *matHeaderCellDef>Email</th>\r\n            <td mat-cell *matCellDef=\"let player\"> {{player.email}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"registrationDate\">\r\n            <th mat-header-cell *matHeaderCellDef>Registration Date</th>\r\n            <td mat-cell *matCellDef=\"let player\"> {{player.registrationDate|date}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"action\">\r\n            <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n            <td mat-cell *matCellDef=\"let row\">\r\n                <button mat-mini-fab color=\"warn\" disabled *ngIf=\"roleMatch('user')\"><i class=\"fa fa-trash\"></i></button>\r\n                <button mat-mini-fab color=\"warn\" (click)=\"openDeletePlayerDialog(row.id)\"><i class=\"fa fa-trash\"></i></button>\r\n            </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n    </table>\r\n\r\n    <mat-paginator #paginator [length]=\"pagedPlayers?.total\" [pageIndex]=\"0\" [pageSize]=\"4\"\r\n        [pageSizeOptions]=\"[4, 10, 25, 50]\">\r\n    </mat-paginator>\r\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TournamentPlayer } from '../services/player.service';\r\nimport { PlayerDto } from '../models/player.model';\r\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n  @ViewChild('Image', { static: true }) fileInput: ElementRef\r\n\r\n  form: FormGroup;\r\n  errorText: any;\r\n  imgUrl: string;\r\n  fileToUpload: File;\r\n  profileImage: string;\r\n  \r\n  constructor(private router: Router, private playerService: TournamentPlayer, private snackBar: MatSnackBar) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.initializeForm();\r\n    this.getPlayer()\r\n  }\r\n\r\n  getPlayer() {\r\n    this.playerService.getPlayer().subscribe(p => {\r\n      this.form.patchValue({ ...p });\r\n      this.imgUrl = p.profileImage;\r\n      let imgArray = p.profileImage.split(\"/\");\r\n      let imgName = imgArray[imgArray.length-1]\r\n      this.fileToUpload = new File([\"\"], imgName);\r\n    })\r\n  }\r\n\r\n  private initializeForm(): void {\r\n    this.form = new FormGroup({\r\n      name: new FormControl('', [Validators.required, Validators.maxLength(8)]),\r\n      surname: new FormControl(''),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      userName: new FormControl('')\r\n    });\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['tournament-table']);\r\n  }\r\n\r\n  save() {\r\n    let player: PlayerDto;\r\n    player = {\r\n      ...this.form.getRawValue(),\r\n      profileImage: this.fileToUpload.name\r\n    }\r\n    this.playerService.updatePlayer(player).subscribe(\r\n      p => {\r\n        this.errorText = p;\r\n        console.log(p);\r\n        let finalMessage = \"\";\r\n        if (this.errorText.errors.length != 0) {\r\n          finalMessage = this.errorText.errors[0].description;\r\n        } else {\r\n          finalMessage = \"Success\"\r\n        }\r\n        this.snackBar.open(finalMessage, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'top'\r\n        })\r\n        this.playerService.uploadImage(this.fileToUpload).subscribe();\r\n        location.reload();\r\n      });\r\n  }\r\n\r\n  handleFileInput(file: FileList) {\r\n    this.fileToUpload = file.item(0);\r\n    var reader = new FileReader();\r\n    reader.onload = (event: any) => {\r\n      this.imgUrl = event.target.result;\r\n    }\r\n    reader.readAsDataURL(this.fileToUpload);\r\n  }\r\n\r\n\r\n  getErrorMessage() {\r\n    if (this.form.get('email').hasError('required')) {\r\n      return 'You must enter a value';\r\n    }\r\n    return this.form.get('email').hasError('email') ? 'Not a valid email' : '';\r\n  }\r\n\r\n}\r\n","<h1>Edit Profile</h1>\r\n\r\n<div class=\"parent\">\r\n  <form class=\"example-form\" [formGroup]=\"form\" (ngSubmit)=\"save()\">\r\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput placeholder=\"New Name\" formControlName=\"name\" required>\r\n      <mat-error *ngIf=\"form.get('name').hasError('required')\">This field is required</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput placeholder=\"New Surname\" formControlName=\"surname\" required>\r\n      <!-- <mat-error *ngIf=\"name.invalid\">{{getErrorMessage()}}</mat-error> -->\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput placeholder=\"New Email\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessage()}}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n      <mat-label>UserName</mat-label>\r\n      <input matInput placeholder=\"New UserName\" formControlName=\"userName\" required>\r\n      <!-- <mat-error *ngIf=\"name.invalid\">{{getErrorMessage()}}</mat-error> -->\r\n    </mat-form-field>\r\n\r\n    <div class=\"imgPosition\">\r\n      <img [src]=\"imgUrl\" class=\"imgStyle\">\r\n      <input type=\"file\" #Image accept=\"image/*\" (change)=\"handleFileInput($event.target.files)\" required>\r\n    </div>\r\n\r\n    <mat-dialog-actions>\r\n      <button mat-raised-button color=\"primary\" type=\"submit\"\r\n        [disabled]=\"!form.get('email').valid || !form.get('name').valid || !form.get('surname').valid || !form.get('userName').valid\">\r\n        <mat-icon>save</mat-icon>Save\r\n      </button>\r\n      <button mat-raised-button color=\"warn\" type=\"button\" (click)=\"cancel()\" class=\"cancel\">\r\n        <mat-icon>cancel</mat-icon>Cancel\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { PlayerForLogin } from '../models/account/PlayerForLogin';\r\nimport { BearerToken } from '../models/account/BearerToken';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n\r\n  baseUrl = environment.apiUrl + 'api/account/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  isLoggedIn(): boolean {\r\n    const token = localStorage.getItem('accessToken');\r\n    return token ? true : false;\r\n  }\r\n\r\n  login(playerForLoginDto: PlayerForLogin): Observable<BearerToken> {\r\n    return this.http.post<BearerToken>(this.baseUrl + 'login/', playerForLoginDto);\r\n  }\r\n\r\n  googleLogin(userData) {\r\n    return this.http.get<any>(this.baseUrl + 'googleLogin/', userData).pipe(\r\n      map(result => {\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { IPlayer, PlayerDto, PlayerRoles, ChangePassword, PlayerForDelete } from '../models/player.model';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PaginatedRequest } from '../infrastructure/models/PaginatedRequest';\r\nimport { PagedResult } from '../infrastructure/models/PagedResult';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class TournamentPlayer {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    baseUrl = environment.apiUrl;\r\n\r\n    getPlayerList(): Observable<IPlayer[]> {\r\n        return this.http.get<IPlayer[]>(this.baseUrl + 'api/player');\r\n    }\r\n\r\n    postPlayer(player: PlayerDto) {\r\n        return this.http.post(this.baseUrl + 'api/account/register', player);\r\n    }\r\n\r\n    getRoles(): Observable<PlayerRoles[]> {\r\n        return this.http.get<PlayerRoles[]>(this.baseUrl + 'api/player/roles');\r\n    }\r\n\r\n    getPlayer(): Observable<PlayerDto> {\r\n        return this.http.get<PlayerDto>(this.baseUrl + 'api/player/playerAccount');\r\n    }\r\n\r\n\r\n    getPlayerById(id: number): Observable<IPlayer> {\r\n        return this.http.get<IPlayer>(this.baseUrl + 'api/player/' + id);\r\n    }\r\n\r\n\r\n    updatePlayer(player: PlayerDto) {\r\n        return this.http.post(this.baseUrl + 'api/account/editPlayer', player);\r\n    }\r\n\r\n    changePassword(passwordDto: ChangePassword) {\r\n        return this.http.post(this.baseUrl + 'api/account/changePassword', passwordDto);\r\n    }\r\n\r\n    private handleError(error: HttpErrorResponse) {\r\n        return Observable.throw(error.message);\r\n    }\r\n\r\n    getPlayersPaged(paginatedRequest: PaginatedRequest): Observable<PagedResult<IPlayer>> {\r\n        return this.http.post<PagedResult<IPlayer>>(this.baseUrl + 'api/player/paginatedSearch', paginatedRequest);\r\n    }\r\n\r\n    deletePlayer(playerId: number):Observable<PlayerForDelete> {\r\n        return this.http.delete<PlayerForDelete>(this.baseUrl + 'api/player/' + playerId);\r\n    }\r\n\r\n    uploadImage(filetToUpload:File){\r\n        const formData:FormData = new FormData();\r\n        formData.append('Image',filetToUpload,filetToUpload.name);\r\n        return this.http.post(this.baseUrl +'api/account/uploadImage',formData);\r\n    }\r\n} ","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  constructor() { }\r\n\r\n  private data: any;\r\n  private name: any;\r\n  private id: number;\r\n\r\n  setData(data: any) {\r\n    this.data = data;\r\n  }\r\n\r\n  setName(name: any) {\r\n    this.name = name;\r\n  }\r\n\r\n  getName() {\r\n    const temp = this.name;\r\n    this.clearData();\r\n    return temp;\r\n  }\r\n\r\n  setId(id: number) {\r\n    this.id = id;\r\n  }\r\n\r\n  getId(){\r\n    const temp = this.id\r\n    this.clearData();\r\n    return temp;\r\n  }\r\n  getData() {\r\n    const temp = this.data;\r\n    this.clearData();\r\n    return temp;\r\n  }\r\n\r\n  clearData() {\r\n    this.data = undefined;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ITournament, TournamentDto, WinnedTournaments } from '../models/tournament-table.model';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class TournamentTableService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    baseUrl = environment.apiUrl;\r\n\r\n    getTournamentList(): Observable<ITournament[]> {\r\n        return this.http.get<ITournament[]>(this.baseUrl + 'api/tournament');\r\n    }\r\n\r\n    postTournament(tournament: TournamentDto) {\r\n        return this.http.post(this.baseUrl + 'api/tournament', tournament);\r\n    }\r\n\r\n    deleteTournament(id: number): Observable<number> {\r\n        return this.http.delete<number>(this.baseUrl + 'api/tournament/' + id);\r\n    }\r\n\r\n    getTournamentById(id: number): Observable<TournamentDto> {\r\n        return this.http.get<TournamentDto>(this.baseUrl + 'api/tournament/' + id)\r\n    }\r\n\r\n    getWinnedTournaments(): Observable<WinnedTournaments[]> {\r\n        return this.http.get<WinnedTournaments[]>(this.baseUrl + ('api/tournament/participationTournaments'))\r\n    }\r\n\r\n    updateTournament(tournament: TournamentDto) {\r\n        return this.http.put(this.baseUrl + 'api/tournament', tournament)\r\n    }\r\n\r\n    getProgress(): Observable<number[]> {\r\n        return this.http.get<number[]>(this.baseUrl + 'api/tournament/progress')\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ChangePassword } from '../models/player.model';\nimport { TournamentPlayer } from '../services/player.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n  hide = true;\n  hide1 = true;\n  \n  curentPassword = new FormControl('');\n  newPassword = new FormControl('');\n  errorText:any;\n\n  constructor(private snackBar:MatSnackBar,private router:Router, private playerService: TournamentPlayer) { }\n\n  ngOnInit(): void {\n  }\n\n  cancel() {\n    this.router.navigate(['tournament-table']);\n  }\n\n  changePassword(){\n    const passwordDto :ChangePassword={\n      curentPassword :this.curentPassword.value,\n      newPassword : this.newPassword.value\n    }\n    this.playerService.changePassword(passwordDto).subscribe(\n      p => {\n        console.log(p);\n        \n        this.errorText = p;\n        let finalMessage = \"\";\n        if (this.errorText.errors.length != 0) {\n          finalMessage = this.errorText.errors[0].description;\n        } else {\n          finalMessage = \"Password Changed Successefully\"\n        }\n        this.snackBar.open(finalMessage, '', {\n          duration: 3000,\n          verticalPosition: 'top'\n        })\n      },\n      error => {\n        this.errorText = error;\n        let finalMessage = this.errorText.error;\n        this.snackBar.open(\"Incorect Input of Curent Password\", '', {\n          duration: 3000,\n          verticalPosition: 'top'\n        })\n      });\n  }\n\n}\n","<h1>Change Password</h1>\n\n<div class=\"parent\">\n  <form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Curent Password</mat-label>\n      <input matInput  type=\"password\" [type] =\"hide1 ? 'password':'text'\" placeholder=\"Password\" [formControl]=\"curentPassword\" >\n      <i class = \"material-icons\" matSuffix (click) = \"hide1 =!hide1\">{{hide1 ?'visibility_off':'visibility'}}</i>\n      <!-- <mat-error *ngIf=\"name.invalid\">{{getErrorMessage()}}</mat-error> -->\n    </mat-form-field>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>New Password</mat-label>\n      <input matInput  type=\"password\" [type] =\"hide ? 'password':'text'\" placeholder=\"Password\" [formControl]=\"newPassword\" >\n      <i class = \"material-icons\" matSuffix (click) = \"hide =!hide\">{{hide ?'visibility_off':'visibility'}}</i>\n      <!-- <mat-error *ngIf=\"name.invalid\">{{getErrorMessage()}}</mat-error> -->\n    </mat-form-field>\n    <mat-dialog-actions>\n        <button mat-raised-button color=\"primary\" (click)=\"changePassword()\">\n          <mat-icon>save</mat-icon>Save\n        </button>\n        <button mat-raised-button color=\"warn\"class=\"cancel\" (click)=\"cancel()\">\n          <mat-icon>cancel</mat-icon>Cancel\n        </button>\n      </mat-dialog-actions>\n</form>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { TournamentPlayer } from 'src/app/services/player.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ITournament } from 'src/app/models/tournament-table.model';\nimport { Router } from '@angular/router';\nimport { IDropdownSettings } from 'ng-multiselect-dropdown';\nimport { DataService } from '../../services/shared/data.service';\n\n@Component({\n  selector: 'app-add-tournament-dialog',\n  templateUrl: './add-tournament-dialog.component.html',\n  styleUrls: ['./add-tournament-dialog.component.css']\n})\nexport class AddTournamentDialogComponent implements OnInit {\n\n  tournament:ITournament;\n  public players =[];\n  public tournamentName = new FormControl('', [Validators.required]);\n  \n  dropdownList = [];\n  selectedItems =[];\n  dropdownSettings:IDropdownSettings;\n\n  constructor(private dataService:DataService,private router:Router,private _players:TournamentPlayer ,private dialogRef:MatDialogRef<AddTournamentDialogComponent>) { }\n\n  ngOnInit():void {\n    this._players.getPlayerList()\n    .subscribe(p=>this.dropdownList = p)\n  \n    this.selectedItems = [];\n    this.dropdownSettings= {\n      singleSelection: false,\n      idField: 'id',\n      textField: 'userName',\n      selectAllText: 'Select All',\n      unSelectAllText: 'UnSelect All',\n      itemsShowLimit: 9,\n      allowSearchFilter: true\n    };\n  }\n\nonItemSelect(item:any){\n    console.log(item);\n    console.log(this.selectedItems);\n}\nOnItemDeSelect(item:any){\n    console.log(item);\n    console.log(this.selectedItems);\n}\nonSelectAll(items: any){\n    console.log(items);\n}\nonDeSelectAll(items: any){\n    console.log(items);\n}\n\n\n\n  getErrorMessage() {\n    if (this.tournamentName.hasError('required')) {\n      return 'Enter Tournament Name';\n    }\n  }\n  routeToAddTournamentPage() {\n    this.router.navigate(['add-tournament']);\n  }\n  create(){\n    console.log(\"selected items\",this.selectedItems);\n    this.dialogRef.close(this.selectedItems);\n    this.dataService.setData(this.selectedItems);\n    this.dataService.setName(this.tournamentName.value)\n    console.log(this.tournamentName.value);\n    this.routeToAddTournamentPage();\n  }\n  \n  dismiss(){\n    this.dialogRef.close(null);\n  }\n\n  \n\n}\n","<h2 mat-dialog-title>New Tournament</h2>\n\n<!-- <mat-dialog-content > -->\n\n<div class=\"exemple-container\">\n  <mat-form-field class = \"drop-down-style\">\n    <mat-label>Tournament Name</mat-label>\n    <input matInput placeholder=\"Enter Name\" [formControl]=\"tournamentName\" required>\n    <mat-error *ngIf=\"tournamentName.invalid\">{{getErrorMessage()}}</mat-error>\n  </mat-form-field>\n\n  <div class=\"drop-down-style\">\n    <ng-multiselect-dropdown [placeholder]=\"'Select Players'\" [data]=\"dropdownList\" [(ngModel)]=\"selectedItems\"\n      [settings]=\"dropdownSettings\" (onSelect)=\"onItemSelect($event)\" (onSelectAll)=\"onSelectAll($event)\">\n    </ng-multiselect-dropdown>\n  </div>\n</div>\n\n<!-- </mat-dialog-content> -->\n\n<mat-dialog-actions >\n  <button mat-raised-button color=\"primary\" class=\"save\" (click)='create()' [disabled]=\"!tournamentName.valid\">\n    <mat-icon>save</mat-icon>Save\n  </button>\n  <button mat-raised-button color =\"warn\"class =\"cancel\" (click)='dismiss()'>\n    <mat-icon>cancel</mat-icon>Cancel\n  </button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { TournamentTableService } from 'src/app/services/tournamnet-table.service';\r\nimport { DataService } from 'src/app/services/shared/data.service';\r\n\r\n@Component({\r\n  selector: 'delete-dialog',\r\n  templateUrl: './delete-dialog.component.html',\r\n  styleUrls: ['./delete-dialog.component.css']\r\n})\r\n\r\nexport class DeleteDialogComponent implements OnInit {\r\n\r\n  id: number;\r\n  constructor(private dataService: DataService, private dialogRef: MatDialogRef<DeleteDialogComponent>, private tournamentService: TournamentTableService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  dismiss() {\r\n    this.dialogRef.close(null);\r\n  }\r\n\r\n  deleteTournament() {\r\n    this.id = this.dataService.getData();\r\n    console.log(this.id);\r\n    this.tournamentService.deleteTournament(this.id).subscribe(() => { this.dismiss() });\r\n  }\r\n\r\n}","<h2 mat-dialog-title>Are you sure delete this Tournament</h2>\n<mat-dialog-actions >\n    <button mat-mini-fab color=\"warn\"(click) = \"deleteTournament()\"><i class=\"fa fa-trash\"></i></button>\n    <button mat-mini-fab color=\"primary\" (click) =\"dismiss()\"><i class=\"fa fa-times\"></i></button>\n</mat-dialog-actions>","<h1>Tournament Table</h1>\r\n\r\n<div>\r\n  <button mat-raised-button color=\"accent\" (click)=\"openAddTournamentDialog()\">NewTournament</button>\r\n</div>\r\n\r\n<div class=\"mat-elevation-z8 tournament-table\">\r\n  <table [dataSource]=\"dataSource\" mat-table class=\"full-width-table\">\r\n    <!-- Id Column -->\r\n    <ng-container matColumnDef=\"id\" class=\"id\">\r\n      <th mat-header-cell *matHeaderCellDef>Id</th>\r\n      <td class=\"id\" mat-cell *matCellDef=\"let tournament\">{{tournament.tournamentId}}</td>\r\n    </ng-container>\r\n\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"tournamentName\">\r\n      <th mat-header-cell *matHeaderCellDef>Tournament Name</th>\r\n      <td mat-cell *matCellDef=\"let tournament\">{{tournament.tournamentName}}</td>\r\n    </ng-container>\r\n\r\n    <!-- WinnerName -->\r\n    <ng-container matColumnDef=\"winnerName\">\r\n      <th mat-header-cell *matHeaderCellDef>Winner Name</th>\r\n      <td mat-cell *matCellDef=\"let tournament\">{{tournament.winnerName}}</td>\r\n    </ng-container>\r\n\r\n    <!-- WinnerName -->\r\n    <ng-container matColumnDef=\"Nr.WinnedGames\">\r\n      <th mat-header-cell *matHeaderCellDef>Number of Winned Games</th>\r\n      <td mat-cell *matCellDef=\"let tournament\">{{tournament.numberOfWins}}</td>\r\n    </ng-container>\r\n    <!-- IconColumn -->\r\n    <ng-container matColumnDef=\"action\">\r\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n      <td mat-cell *matCellDef=\"let row\">\r\n        <button mat-mini-fab color=\"accent\" (click)=\"viewTournament(row.tournamentId)\">\r\n          <i class=\"fa fa-eye\"></i>\r\n        </button>\r\n        <button mat-mini-fab color=\"primary\" (click)=\"editTournament(row.tournamentId)\" *ngIf=\"roleMatch('admin')\">\r\n          <i class=\"fa fa-pencil\"></i></button>\r\n        <button mat-mini-fab color=\"warn\" (click)=openDeleteTournamentDialog(row.tournamentId) >\r\n          <i class=\"fa fa-trash\"></i></button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"progress\">        \r\n        <th mat-header-cell *matHeaderCellDef>Progress Bar</th>\r\n        <td  mat-cell *matCellDef=\"let row\">\r\n          <mat-progress-bar mode=\"determinate\" [value]=\"row.progress\"></mat-progress-bar>\r\n        </td>\r\n    </ng-container>\r\n    \r\n    \r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  \r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { TournamentTableService } from '../services/tournamnet-table.service';\r\nimport { ITournament } from '../models/tournament-table.model';\r\nimport { AddTournamentDialogComponent } from './add-tournament-dialog/add-tournament-dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DeleteDialogComponent } from './delete-dialog/delete-dialog.component';\r\nimport { DataService } from '../services/shared/data.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'tournament-table',\r\n  templateUrl: './tournament-table.component.html',\r\n  styleUrls: ['./tournament-table.component.css']\r\n})\r\nexport class TournamentTableComponent implements OnInit {\r\n\r\n  dataSource: MatTableDataSource<ITournament>;\r\n  progress: Promise<number[]>;\r\n\r\n  constructor(private router: Router, private dataService: DataService, private dialog: MatDialog, private torunamentService: TournamentTableService) { }\r\n\r\n  displayedColumns = ['id', 'tournamentName', 'winnerName', 'Nr.WinnedGames', 'action', 'progress'];\r\n\r\n\r\n  async ngOnInit() {\r\n    await this.getTournamentList();\r\n  }\r\n\r\n  async getTournamentList() {\r\n    this.dataSource = new MatTableDataSource();\r\n\r\n    this.torunamentService.getTournamentList()\r\n      .subscribe(t => {\r\n        this.dataSource.data = t;\r\n        this.torunamentService.getProgress()\r\n          .subscribe(res => {\r\n            this.dataSource.data.forEach((item, index) => {\r\n              item['progress'] = res[index];\r\n            });\r\n          });\r\n      });\r\n\r\n  }\r\n\r\n\r\n  openAddTournamentDialog(): void {\r\n    let dialogRef = this.dialog.open(AddTournamentDialogComponent, {\r\n      width: '600px',\r\n      height: '600px',\r\n      data: {}\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => { this.getTournamentList() });\r\n  }\r\n\r\n  openDeleteTournamentDialog(id: number): void {\r\n    this.dataService.setData(id);\r\n    let dialogRef = this.dialog.open(DeleteDialogComponent);\r\n    dialogRef.afterClosed().subscribe(() => { this.getTournamentList() });\r\n  }\r\n\r\n\r\n  editTournament(id: number) {\r\n    this.dataService.setId(id);\r\n    this.router.navigate(['edit-tournament']);\r\n  }\r\n  viewTournament(id: number) {\r\n    this.dataService.setId(id);\r\n    this.router.navigate(['view-tournament']);\r\n  }\r\n\r\n  roleMatch(allowedRoles): boolean {\r\n    var payLoad = JSON.parse(window.atob(localStorage.getItem('accessToken').split('.')[1]));\r\n    var userRole = payLoad['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\r\n    if (allowedRoles == userRole)\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n}\r\n","<p *ngIf=\"tournament\">{{tournament.name}}</p>\n\n<div class=\"table\">\n  <div class=\"row\">\n    <div class=\"cell\"></div>\n    <div *ngFor=\"let player of players\" class=\"cell player\">\n      {{player.userName}}\n    </div>\n  </div>\n  <div *ngFor=\"let row of scoreTable; index as i;\" class=\"row\">\n    <div class=\"cell player\">\n      {{players[i].userName}}\n    </div>\n\n    <div  *ngFor=\"let cell of row; index as j\" class=\"cell\">\n      <mat-checkbox disabled=\"true\" type=\"checkbox\" *ngIf=\"cell.checked !== 'x'\" [(ngModel)]=\"cell.checked\"></mat-checkbox>\n    </div>\n  </div>\n</div>\n\n<button mat-raised-button class=\"cancel\"color=\"warn\" (click)=\"routeToTournamentTablePage()\"><i class=\"fa fa-backward\"></i> Back</button>\n","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../services/shared/data.service';\nimport { TournamentTableService } from '../services/tournamnet-table.service';\nimport { TournamentDto } from '../models/tournament-table.model';\nimport { Router } from '@angular/router';\nimport { TournamentPlayer } from '../services/player.service';\n\ntype TableCell = {\n  row: number;\n  column: number;\n  checked: boolean | string;\n  playerIdByRow: number;\n};\n\n@Component({\n  selector: 'view-tournament',\n  templateUrl: './view-tournament.component.html',\n  styleUrls: ['./view-tournament.component.css']\n})\nexport class ViewTournamentComponent implements OnInit {\n\n  id: number;\n  players: any[] = [];\n  newGameList: any[] = [];\n  scoreTable: TableCell[][] = [];\n  tournament: TournamentDto;\n\n  constructor(private dataService: DataService, private editTournamentService: TournamentTableService, private router: Router, private playerService: TournamentPlayer) { }\n\n  ngOnInit(): void {\n    this.id = this.dataService.getId();\n    this.editTournamentService.getTournamentById(this.id).subscribe(x => this.onTour(x));\n  }\n\n  async onTour(tour) {\n\n    this.tournament = tour;\n    this.newGameList = this.prepareGameList(this.tournament.games);\n    const firstRow = this.newGameList[0];\n    const firstPlayerId = firstRow[0].playerGames[0].playerId;\n    const player1 = await this.playerService.getPlayerById(firstPlayerId).toPromise();\n    const firstPlayer = { id: firstPlayerId, userName: player1.userName }\n    this.players = await Promise.all([firstPlayer, ...this.newGameList[0].map(async (games) => {\n      const secondPlayerId = games.playerGames.filter(el => el.playerId !== firstPlayerId)[0].playerId;\n      const player = await this.playerService.getPlayerById(secondPlayerId).toPromise();\n      return { id: secondPlayerId, userName: player.userName };\n    })]);\n\n    this.scoreTable = this.generateInitialTable();\n    this.populateTable(this.scoreTable);\n  }\n\n  prepareGameList(games) {\n    const list = games.slice();\n    const result = [];\n    list.reverse();\n    let counter = 1;\n\n    while (list.length) {\n      const removed = list.splice(0, counter);\n      result.push(removed.reverse());\n      counter++;\n    }\n\n    return result.reverse();\n  }\n\n  generateInitialTable() {\n    const table = [];\n\n    for (let i = 0; i < this.players.length; ++i) {\n      table.push([]);\n      for (let j = 0; j < this.players.length; ++j) {\n        const obj = {\n          row: i,\n          column: j,\n          checked: i === j ? \"x\" : false,\n          playerIdByRow: 1\n        }\n        table[i].push(obj);\n      }\n    }\n    return table;\n  }\n\n  populateTable(table) {\n    for (let i = 0; i < this.players.length; i++) {\n      const listForRow = this.newGameList[i];\n      const rowPlayerId = this.players[i].id; \n      for (let j = i + 1; j < this.players.length; j++) {\n        const game = listForRow[j - i - 1];\n        const playerGame1 = game.playerGames.find(el => el.playerId === rowPlayerId);\n        const playerGame2 = game.playerGames.find(el => el.playerId !== rowPlayerId);\n        const obj = {\n          row: i,\n          column: j,\n          checked: i === j ? \"x\" : playerGame1.isWinner,\n          playerIdByRow: playerGame1.playerId,\n          id: playerGame1.gameId\n        }\n        table[i][j] = obj;\n\n        const obj2 = {\n          row: j,\n          column: i,\n          checked: i === j ? \"x\" : playerGame2.isWinner,\n          playerIdByRow: playerGame2.playerId,\n          id: playerGame2.gameId\n        }\n        table[j][i] = obj2;\n      }\n    }\n  }\n\n  routeToTournamentTablePage() {\n    this.router.navigate(['tournament-table']);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl:'http://localhost:60907/',\n  whitelistedDomainsForSendingToken: 'localhost:60907',\n  blacklistedRoutes: 'localhost:60907/api/account/login'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}