// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TBoard.WebApi;

namespace TBoard.WebApi.Migrations
{
    [DbContext(typeof(TournamentContext))]
    [Migration("20200422092906_IdentityMigration")]
    partial class IdentityMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.2.20159.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TBoard.Entities.Auth.PlayerRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("PlayerRole","Auth");
                });

            modelBuilder.Entity("TBoard.Entities.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles","Auth");
                });

            modelBuilder.Entity("TBoard.Entities.Auth.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","Auth");
                });

            modelBuilder.Entity("TBoard.Entities.Auth.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","Auth");
                });

            modelBuilder.Entity("TBoard.Entities.Auth.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","Auth");
                });

            modelBuilder.Entity("TBoard.Entities.Auth.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserRoles","Auth");
                });

            modelBuilder.Entity("TBoard.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            TournamentId = 1
                        },
                        new
                        {
                            GameId = 2,
                            TournamentId = 1
                        },
                        new
                        {
                            GameId = 3,
                            TournamentId = 1
                        },
                        new
                        {
                            GameId = 4,
                            TournamentId = 1
                        },
                        new
                        {
                            GameId = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            GameId = 6,
                            TournamentId = 1
                        },
                        new
                        {
                            GameId = 7,
                            TournamentId = 2
                        },
                        new
                        {
                            GameId = 8,
                            TournamentId = 2
                        },
                        new
                        {
                            GameId = 9,
                            TournamentId = 2
                        },
                        new
                        {
                            GameId = 10,
                            TournamentId = 2
                        },
                        new
                        {
                            GameId = 11,
                            TournamentId = 2
                        },
                        new
                        {
                            GameId = 12,
                            TournamentId = 2
                        });
                });

            modelBuilder.Entity("TBoard.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Players","Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e819b4fd-d855-49ce-bec7-b6fb14e29950",
                            Email = "aaa@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "aaa",
                            PasswordHash = "admin",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "aaa",
                            TwoFactorEnabled = false,
                            UserName = "a1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbe50a19-15b6-46ce-83dd-5b910b3f017f",
                            Email = "bbb@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "bbb",
                            PasswordHash = "admin",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "bbb",
                            TwoFactorEnabled = false,
                            UserName = "b1"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6db62e9b-e33b-468b-961d-0d1aefe3de29",
                            Email = "ccc@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "ccc",
                            PasswordHash = "user",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "ccc",
                            TwoFactorEnabled = false,
                            UserName = "c1"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc8cb57b-3808-406b-a375-1e9e98d1bf3e",
                            Email = "ddd@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "ddd",
                            PasswordHash = "user",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "ddd",
                            TwoFactorEnabled = false,
                            UserName = "d1"
                        });
                });

            modelBuilder.Entity("TBoard.Entities.PlayerGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Player_Game");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            IsWinner = true,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1,
                            IsWinner = false,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 3,
                            GameId = 2,
                            IsWinner = true,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 4,
                            GameId = 2,
                            IsWinner = false,
                            PlayerId = 3
                        },
                        new
                        {
                            Id = 5,
                            GameId = 3,
                            IsWinner = true,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 6,
                            GameId = 3,
                            IsWinner = false,
                            PlayerId = 4
                        },
                        new
                        {
                            Id = 7,
                            GameId = 4,
                            IsWinner = true,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 8,
                            GameId = 4,
                            IsWinner = false,
                            PlayerId = 3
                        },
                        new
                        {
                            Id = 9,
                            GameId = 5,
                            IsWinner = true,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 10,
                            GameId = 5,
                            IsWinner = false,
                            PlayerId = 4
                        },
                        new
                        {
                            Id = 11,
                            GameId = 6,
                            IsWinner = true,
                            PlayerId = 3
                        },
                        new
                        {
                            Id = 12,
                            GameId = 6,
                            IsWinner = false,
                            PlayerId = 4
                        },
                        new
                        {
                            Id = 13,
                            GameId = 7,
                            IsWinner = true,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 14,
                            GameId = 7,
                            IsWinner = false,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 15,
                            GameId = 8,
                            IsWinner = true,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 16,
                            GameId = 8,
                            IsWinner = false,
                            PlayerId = 3
                        },
                        new
                        {
                            Id = 17,
                            GameId = 9,
                            IsWinner = true,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 18,
                            GameId = 9,
                            IsWinner = false,
                            PlayerId = 4
                        },
                        new
                        {
                            Id = 19,
                            GameId = 10,
                            IsWinner = true,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 20,
                            GameId = 10,
                            IsWinner = false,
                            PlayerId = 3
                        },
                        new
                        {
                            Id = 21,
                            GameId = 11,
                            IsWinner = true,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 22,
                            GameId = 11,
                            IsWinner = false,
                            PlayerId = 4
                        },
                        new
                        {
                            Id = 23,
                            GameId = 12,
                            IsWinner = true,
                            PlayerId = 3
                        },
                        new
                        {
                            Id = 24,
                            GameId = 12,
                            IsWinner = false,
                            PlayerId = 4
                        });
                });

            modelBuilder.Entity("TBoard.Entities.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TournamentId");

                    b.ToTable("Tournament");

                    b.HasData(
                        new
                        {
                            TournamentId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tournament1"
                        },
                        new
                        {
                            TournamentId = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tournament2"
                        });
                });

            modelBuilder.Entity("TBoard.Entities.Auth.PlayerRole", b =>
                {
                    b.HasOne("TBoard.Entities.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBoard.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBoard.Entities.Auth.RoleClaim", b =>
                {
                    b.HasOne("TBoard.Entities.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBoard.Entities.Auth.UserClaim", b =>
                {
                    b.HasOne("TBoard.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBoard.Entities.Auth.UserLogin", b =>
                {
                    b.HasOne("TBoard.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBoard.Entities.Auth.UserToken", b =>
                {
                    b.HasOne("TBoard.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBoard.Entities.Game", b =>
                {
                    b.HasOne("TBoard.Entities.Tournament", "Tournament")
                        .WithMany("Game")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBoard.Entities.PlayerGame", b =>
                {
                    b.HasOne("TBoard.Entities.Game", "Game")
                        .WithMany("PlayerGame")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBoard.Entities.Player", "Player")
                        .WithMany("PlayerGame")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
